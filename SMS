/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SMS;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author ankit jaiswal
 */
public class Query {

    public static Vector getSMSSetup() throws SQLException {
        Vector list = new Vector();
        Connection con = null;
        PreparedStatement pre1 = null;
        ResultSet rs = null;
        try {
            con = DataBaseConnection.CreateDataBaseConnection.connectionmethod();
            pre1 = con.prepareStatement("select * from sms_setup");
            rs = pre1.executeQuery();
            if (rs.next()) {
                HashMap hm = new HashMap();
                hm.put(0, rs.getString("senderid"));
                hm.put(1, rs.getString("api_key"));
                hm.put(2, rs.getString("username"));
                hm.put(3, rs.getString("paswrd"));
                hm.put(4, rs.getString("extra"));
                list.add(hm);
            }
        } catch (Exception e) {
            return list;
        } finally {
            con.close();
            pre1.close();
            rs.close();
        }
        return list;
    }

    public static String sms1(String mobile, String msg) throws SQLException {
        Vector list = new Vector();
        String res = "";
        String retval = "";
        list = SMS.Query.getSMSSetup();
        if (!list.isEmpty()) {
            Iterator it = list.iterator();
            if (it.hasNext()) {
                HashMap hm = (HashMap) it.next();
                try {
                    String data = URLEncoder.encode("APIKey", "UTF-8") + "=" + URLEncoder.encode(hm.get(1).toString(), "UTF-8");
                    data += "&" + URLEncoder.encode("senderid", "UTF-8") + "=" + URLEncoder.encode(hm.get(0).toString(), "UTF-8");
                    data += "&" + URLEncoder.encode("channel", "UTF-8") + "=" + URLEncoder.encode("2", "UTF-8");
                    data += "&" + URLEncoder.encode("DCS", "UTF-8") + "=" + URLEncoder.encode("0", "UTF-8");
                    data += "&" + URLEncoder.encode("flashsms", "UTF-8") + "=" + URLEncoder.encode("0", "UTF-8");
                    data += "&" + URLEncoder.encode("number", "UTF-8") + "=" + URLEncoder.encode(mobile, "UTF-8");
                    data += "&" + URLEncoder.encode("text", "UTF-8") + "=" + URLEncoder.encode(msg, "UTF-8");
                    data += "&" + URLEncoder.encode("route", "UTF-8") + "=" + URLEncoder.encode("11", "UTF-8");
                    //Push the HTTP Request 
                    URL url = new URL("https://www.smsgatewayhub.com/api/mt/SendSMS?" + data);
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    String line;
                    while ((line = rd.readLine()) != null) {
                        retval += line;
                    }
                    wr.close();
                    rd.close();
                    System.out.println(retval);
                    res = retval;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return res;
    }

    public static void sendMail(String to, String sub, String msg, final String user, final String pass) throws SQLException {
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(user, pass);
            }
        });
        Connection con = null;
        try {
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(user));
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
            message.setSubject(sub);
            message.setText(msg);
            try {
                Transport.send(message);
            } catch (Exception e) {

            }
            System.out.println("Done");
        } catch (MessagingException e) {
            throw new RuntimeException(e);
        } finally {
            try {
                con.close();
            } catch (SQLException ex) {
            }
        }
    }

}
